<?php
/**
 * DataServiceTest.php
 *
 * PHP version 5.6+
 *
 * @author Philippe Gaultier <pgaultier@sweelix.net>
 * @copyright 2010-2016 Philippe Gaultier
 * @license http://www.sweelix.net/license license
 * @version XXX
 * @link http://www.sweelix.net
 * @package tests\unit
 */

namespace tests\unit;

use sweelix\rbac\redis\DataService;
use sweelix\rbac\redis\DuplicateKeyException;
use yii\base\InvalidCallException;
use yii\base\InvalidParamException;
use yii\base\NotSupportedException;
use yii\rbac\Item;
use yii\rbac\Permission;
use yii\rbac\Role;
use yii\rbac\Rule;
use Yii;

/**
 * Test node basic functions
 *
 * @author Philippe Gaultier <pgaultier@sweelix.net>
 * @copyright 2010-2016 Philippe Gaultier
 * @license http://www.sweelix.net/license license
 * @version XXX
 * @link http://www.sweelix.net
 * @package tests\unit
 * @since XXX
 */
class DataServiceTest extends TestCase
{

    public function setUp()
    {
        $this->mockApplication([
            'components' => [
                'dataService' => [
                    'class' => DataService::className(),
                ]
            ]
        ]);
        // delete all contributor keys
        $keys = Yii::$app->redis->executeCommand('KEYS', ['auth:*']);
        if (count($keys) > 0) {
            Yii::$app->redis->executeCommand('DEL', $keys);
        }
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * @return DataService
     * @since XXX
     */
    protected function getDataService()
    {
        return Yii::$app->dataService;
    }

    protected function createDataServiceComponent()
    {
        $component = new DataService();
        return $component;
    }

    public function testRuleException()
    {
        $rule = new TestRule();
        $this->expectException(InvalidParamException::class);
        $this->getDataService()->addRule($rule);
    }

    public function testRuleDuplicateException()
    {
        $rule = new TestRule();
        $rule->name = 'test';
        $result = $this->getDataService()->addRule($rule);
        $this->assertTrue($result);
        $rule = new TestRule();
        $rule->name = 'test';
        $this->expectException(DuplicateKeyException::class);
        $this->getDataService()->addRule($rule);
    }

    public function testRuleGetSet()
    {
        $rule = new TestRule();
        $rule->name = 'test';
        $result = $this->getDataService()->addRule($rule);
        $this->assertTrue($result);

        $fetchedRule = $this->getDataService()->getRule('test');

        $this->assertEquals($rule->name, $fetchedRule->name);
        $this->assertEquals($rule->createdAt, $fetchedRule->createdAt);
        $this->assertEquals($rule->updatedAt, $fetchedRule->updatedAt);

        $fetchedRule = $this->getDataService()->getRule('plop');
        $this->assertNull($fetchedRule);
    }

    public function testRuleDelete()
    {
        $rule = new TestRule();
        $rule->name = 'test';
        $result = $this->getDataService()->addRule($rule);
        $this->assertTrue($result);

        $fetchedRule = $this->getDataService()->getRule('test');

        $this->assertEquals($rule->name, $fetchedRule->name);
        $this->assertEquals($rule->createdAt, $fetchedRule->createdAt);
        $this->assertEquals($rule->updatedAt, $fetchedRule->updatedAt);

        $this->getDataService()->removeRule($fetchedRule);

        $this->assertNull($this->getDataService()->getRule('test'));
    }

    public function testRuleUpdate()
    {
        $rule = new TestRule();
        $rule->name = 'test';
        $result = $this->getDataService()->addRule($rule);
        $this->assertTrue($result);

        $fetchedRule = $this->getDataService()->getRule('test');

        $this->assertEquals($rule->name, $fetchedRule->name);
        $this->assertEquals($rule->createdAt, $fetchedRule->createdAt);
        $this->assertEquals($rule->updatedAt, $fetchedRule->updatedAt);

        $fetchedRule->name = 'newtest';

        $this->getDataService()->updateRule('test', $fetchedRule);
        $this->assertNull($this->getDataService()->getRule('test'));
        $otherFetchedRule = $this->getDataService()->getRule('newtest');

        $this->assertEquals($fetchedRule->name, $otherFetchedRule->name);
        $this->assertEquals($fetchedRule->createdAt, $otherFetchedRule->createdAt);
        $this->assertEquals($fetchedRule->updatedAt, $otherFetchedRule->updatedAt);

    }

    public function testItemException()
    {
        $item = new Permission();
        $this->expectException(InvalidParamException::class);
        $this->getDataService()->addItem($item);
    }

    public function testItemDuplicateException()
    {
        $item = new Permission();
        $item->name = 'test';
        $item->description = 'description';
        $item->ruleName = 'rule';
        $result = $this->getDataService()->addItem($item);
        $this->assertTrue($result);
        $item = new Permission();
        $item->name = 'test';
        $item->description = 'description';
        $item->ruleName = 'rule';
        $this->expectException(DuplicateKeyException::class);
        $this->getDataService()->addItem($item);
    }

    public function testItemGetSet()
    {
        $rule = new TestRule();
        $rule->name = 'rule1';
        $result = $this->getDataService()->addRule($rule);
        $this->assertTrue($result);

        $item = new Permission();
        $item->name = 'test';
        $item->description = 'description';
        $item->ruleName = 'rule1';
        $result = $this->getDataService()->addItem($item);
        $this->assertTrue($result);

        $fetchedItem = $this->getDataService()->getItem('test');

        $this->assertEquals($item->name, $fetchedItem->name);
        $this->assertEquals($item->description, $fetchedItem->description);
        $this->assertEquals($item->ruleName, $fetchedItem->ruleName);
        $this->assertEquals($item->createdAt, $fetchedItem->createdAt);
        $this->assertEquals($item->updatedAt, $fetchedItem->updatedAt);
        $this->assertInstanceOf(Permission::className(), $item);

        $fetchedItem = $this->getDataService()->getItem('plop');
        $this->assertNull($fetchedItem);

        $item2 = new Role();
        $item2->name = 'admin';

        $result = $this->getDataService()->addItem($item2);
        $this->assertTrue($result);

        $fetchedItem2 = $this->getDataService()->getItem('admin');

        $this->assertEquals($item2->name, $fetchedItem2->name);
        $this->assertEquals($item2->description, $fetchedItem2->description);
        $this->assertEquals($item2->ruleName, $fetchedItem2->ruleName);
        $this->assertEquals($item2->createdAt, $fetchedItem2->createdAt);
        $this->assertEquals($item2->updatedAt, $fetchedItem2->updatedAt);
        $this->assertInstanceOf(Role::className(), $item2);
    }

    public function testItemDelete()
    {
        $rule = new TestRule();
        $rule->name = 'rule1';
        $result = $this->getDataService()->addRule($rule);
        $this->assertTrue($result);

        $item = new Permission();
        $item->name = 'test';
        $item->description = 'description';
        $item->ruleName = 'rule1';
        $result = $this->getDataService()->addItem($item);
        $this->assertTrue($result);

        $this->getDataService()->removeItem($item);

        $this->assertNull($this->getDataService()->getItem('test'));
        $this->assertInstanceOf(Rule::className(), $this->getDataService()->getRule('rule1'));
    }

    public function testItemUpdate()
    {
        $rule = new TestRule();
        $rule->name = 'rule1';
        $result = $this->getDataService()->addRule($rule);
        $this->assertTrue($result);

        $rule = new TestRule();
        $rule->name = 'rule2';
        $result = $this->getDataService()->addRule($rule);
        $this->assertTrue($result);

        $item = new Permission();
        $item->name = 'test';
        $item->description = 'description';
        $item->ruleName = 'rule1';
        $result = $this->getDataService()->addItem($item);
        $this->assertTrue($result);

        $fetchedItem = $this->getDataService()->getItem('test');
        
        $fetchedItem->ruleName = 'rule2';
        $fetchedItem->name = 'updatedTest';
        $fetchedItem->description = null;
        $this->getDataService()->updateItem('test', $fetchedItem);

        $fetchedItem2 = $this->getDataService()->getItem('updatedTest');

        $this->assertEquals($fetchedItem->name, $fetchedItem2->name);
        $this->assertEquals($fetchedItem->description, $fetchedItem2->description);
        $this->assertEquals($fetchedItem->ruleName, $fetchedItem2->ruleName);
        $this->assertEquals($fetchedItem->createdAt, $fetchedItem2->createdAt);
        $this->assertEquals($fetchedItem->updatedAt, $fetchedItem2->updatedAt);
        $this->assertInstanceOf(Permission::className(), $fetchedItem2);

        $fetchedItem = $this->getDataService()->getItem('updatedTest');

        $fetchedItem->ruleName = null;
        $fetchedItem->description = 'new description';
        $this->getDataService()->updateItem('updatedTest', $fetchedItem);

        $fetchedItem2 = $this->getDataService()->getItem('updatedTest');

        $this->assertEquals($fetchedItem->name, $fetchedItem2->name);
        $this->assertEquals($fetchedItem->description, $fetchedItem2->description);
        $this->assertEquals($fetchedItem->ruleName, $fetchedItem2->ruleName);
        $this->assertEquals($fetchedItem->createdAt, $fetchedItem2->createdAt);
        $this->assertEquals($fetchedItem->updatedAt, $fetchedItem2->updatedAt);
        $this->assertInstanceOf(Permission::className(), $fetchedItem2);
    }

    public function testItemRuleDetach()
    {
        $rule = new TestRule();
        $rule->name = 'rule1';
        $result = $this->getDataService()->addRule($rule);
        $this->assertTrue($result);

        $rule2 = new TestRule();
        $rule2->name = 'rule2';
        $result = $this->getDataService()->addRule($rule2);
        $this->assertTrue($result);

        $item = new Permission();
        $item->name = 'test';
        $item->description = 'description';
        $item->ruleName = 'rule1';
        $result = $this->getDataService()->addItem($item);
        $this->assertTrue($result);

        $fetchItem = $this->getDataService()->getItem('test');
        $this->assertEquals('rule1', $fetchItem->ruleName);

        $this->getDataService()->removeRule($rule);

        $fetchItem = $this->getDataService()->getItem('test');
        $this->assertNull($fetchItem->ruleName);

    }

    public function testListItems()
    {
        $rule = new TestRule();
        $rule->name = 'rule1';
        $result = $this->getDataService()->addRule($rule);
        $this->assertTrue($result);

        $item = new Permission();
        $item->name = 'test1';
        $item->description = 'description';
        $item->ruleName = 'rule1';
        $result = $this->getDataService()->addItem($item);
        $this->assertTrue($result);

        $item = new Permission();
        $item->name = 'test2';
        $item->description = 'description';
        $item->ruleName = 'rule1';
        $result = $this->getDataService()->addItem($item);
        $this->assertTrue($result);

        $item = new Permission();
        $item->name = 'test3';
        $item->description = 'description';
        $item->ruleName = 'rule1';
        $result = $this->getDataService()->addItem($item);
        $this->assertTrue($result);


        $item = new Role();
        $item->name = 'admin1';
        $result = $this->getDataService()->addItem($item);
        $this->assertTrue($result);

        $item = new Role();
        $item->name = 'admin2';
        $result = $this->getDataService()->addItem($item);
        $this->assertTrue($result);

        $item = new Role();
        $item->name = 'admin3';
        $result = $this->getDataService()->addItem($item);
        $this->assertTrue($result);

        $roles = $this->getDataService()->getItems(Item::TYPE_ROLE);
        $this->assertTrue(count($roles) === 3);

        $permissions = $this->getDataService()->getItems(Item::TYPE_PERMISSION);
        $this->assertTrue(count($permissions) === 3);

        $item->type = Permission::TYPE_PERMISSION;
        $this->getDataService()->updateItem($item->name, $item);

        $roles = $this->getDataService()->getItems(Item::TYPE_ROLE);
        $this->assertTrue(count($roles) === 2);

        $permissions = $this->getDataService()->getItems(Item::TYPE_PERMISSION);
        $this->assertTrue(count($permissions) === 4);

    }

    public function testListRules()
    {
        $rule = new TestRule();
        $rule->name = 'rule1';
        $result = $this->getDataService()->addRule($rule);
        $this->assertTrue($result);

        $rule = new TestRule();
        $rule->name = 'rule2';
        $result = $this->getDataService()->addRule($rule);
        $this->assertTrue($result);

        $rule = new TestRule();
        $rule->name = 'rule3';
        $result = $this->getDataService()->addRule($rule);
        $this->assertTrue($result);

        $rule = new TestRule();
        $rule->name = 'rule4';
        $result = $this->getDataService()->addRule($rule);
        $this->assertTrue($result);

        $rules = $this->getDataService()->getRules();

        $this->assertTrue(count($rules) === 4);
    }

    public function testChildrenException()
    {
        $permission = new Permission();
        $permission->name = 'permission1';
        $result = $this->getDataService()->addItem($permission);
        $this->assertTrue($result);

        $this->expectException(InvalidParamException::class);
        $this->getDataService()->addChild($permission, $permission);

    }

    public function testChildrenRoleException()
    {
        $permission = new Permission();
        $permission->name = 'permission1';
        $result = $this->getDataService()->addItem($permission);
        $this->assertTrue($result);

        $role = new Role();
        $role->name = 'role1';
        $result = $this->getDataService()->addItem($role);
        $this->assertTrue($result);

        $this->expectException(InvalidParamException::class);
        $this->getDataService()->addChild($permission, $role);

    }

    public function testChildrenLoop()
    {
        $permission1 = new Permission();
        $permission1->name = 'permission1';
        $result = $this->getDataService()->addItem($permission1);
        $this->assertTrue($result);

        $permission2 = new Permission();
        $permission2->name = 'permission2';
        $result = $this->getDataService()->addItem($permission2);
        $this->assertTrue($result);

        $permission3 = new Permission();
        $permission3->name = 'permission3';
        $result = $this->getDataService()->addItem($permission3);
        $this->assertTrue($result);

        $permission4 = new Permission();
        $permission4->name = 'permission4';
        $result = $this->getDataService()->addItem($permission4);
        $this->assertTrue($result);

        $result = $this->getDataService()->addChild($permission1, $permission2);
        $this->assertTrue($result);
        $result = $this->getDataService()->addChild($permission2, $permission3);
        $this->assertTrue($result);
        $result = $this->getDataService()->addChild($permission3, $permission4);
        $this->assertTrue($result);
        $this->expectException(InvalidCallException::class);
        $this->getDataService()->addChild($permission4, $permission1);

    }

    public function testRemoveChildren()
    {
        $permission1 = new Permission();
        $permission1->name = 'permission1';
        $result = $this->getDataService()->addItem($permission1);
        $this->assertTrue($result);

        $permission2 = new Permission();
        $permission2->name = 'permission2';
        $result = $this->getDataService()->addItem($permission2);
        $this->assertTrue($result);

        $permission3 = new Permission();
        $permission3->name = 'permission3';
        $result = $this->getDataService()->addItem($permission3);
        $this->assertTrue($result);

        $permission4 = new Permission();
        $permission4->name = 'permission4';
        $result = $this->getDataService()->addItem($permission4);
        $this->assertTrue($result);

        $result = $this->getDataService()->addChild($permission1, $permission2);
        $this->assertTrue($result);
        $result = $this->getDataService()->addChild($permission1, $permission3);
        $this->assertTrue($result);
        $result = $this->getDataService()->addChild($permission1, $permission4);
        $this->assertTrue($result);

        $children = $this->getDataService()->getChildren($permission1->name);
        $this->assertTrue(count($children) === 3);

        $this->getDataService()->removeChildren($permission1);

        $children = $this->getDataService()->getChildren($permission1->name);
        $this->assertTrue(count($children) === 0);


    }
    public function testChildren()
    {
        $permission1 = new Permission();
        $permission1->name = 'permission1';
        $result = $this->getDataService()->addItem($permission1);
        $this->assertTrue($result);

        $permission2 = new Permission();
        $permission2->name = 'permission2';
        $result = $this->getDataService()->addItem($permission2);
        $this->assertTrue($result);

        $permission3 = new Permission();
        $permission3->name = 'permission3';
        $result = $this->getDataService()->addItem($permission3);
        $this->assertTrue($result);

        $result = $this->getDataService()->addChild($permission1, $permission2);
        $this->assertTrue($result);

        $this->assertTrue($this->getDataService()->hasChild($permission1, $permission2));
        $this->assertFalse($this->getDataService()->hasChild($permission2, $permission1));

        $result = $this->getDataService()->addChild($permission2, $permission3);
        $this->assertTrue($result);
        $this->assertTrue($this->getDataService()->hasChild($permission2, $permission3));

        $this->getDataService()->removeChild($permission2, $permission3);
        $this->assertTrue($this->getDataService()->hasChild($permission1, $permission2));
        $this->assertFalse($this->getDataService()->hasChild($permission2, $permission3));

        $result = $this->getDataService()->addChild($permission1, $permission3);
        $this->assertTrue($result);
        $this->assertTrue($this->getDataService()->hasChild($permission1, $permission3));

        $this->getDataService()->removeChild($permission1, $permission2);
        $this->assertTrue($this->getDataService()->hasChild($permission1, $permission3));
        $this->assertFalse($this->getDataService()->hasChild($permission1, $permission2));

    }

    public function testAssignment()
    {
        $permission1 = new Permission();
        $permission1->name = 'permission1';
        $result = $this->getDataService()->addItem($permission1);
        $this->assertTrue($result);

        $permission2 = new Permission();
        $permission2->name = 'permission2';
        $result = $this->getDataService()->addItem($permission2);
        $this->assertTrue($result);

        $permission3 = new Permission();
        $permission3->name = 'permission3';
        $result = $this->getDataService()->addItem($permission3);
        $this->assertTrue($result);

        $role = new Role();
        $role->name = 'admin';
        $result = $this->getDataService()->addItem($role);
        $this->assertTrue($result);


        $result = $this->getDataService()->addChild($permission1, $permission2);
        $this->assertTrue($result);

        $this->assertTrue($this->getDataService()->hasChild($permission1, $permission2));
        $this->assertFalse($this->getDataService()->hasChild($permission2, $permission1));

        $result = $this->getDataService()->addChild($permission2, $permission3);
        $this->assertTrue($result);
        $this->assertTrue($this->getDataService()->hasChild($permission2, $permission3));

        $this->getDataService()->removeChild($permission2, $permission3);
        $this->assertTrue($this->getDataService()->hasChild($permission1, $permission2));
        $this->assertFalse($this->getDataService()->hasChild($permission2, $permission3));

        $result = $this->getDataService()->addChild($permission1, $permission3);
        $this->assertTrue($result);
        $this->assertTrue($this->getDataService()->hasChild($permission1, $permission3));

        $this->getDataService()->removeChild($permission1, $permission2);
        $this->assertTrue($this->getDataService()->hasChild($permission1, $permission3));
        $this->assertFalse($this->getDataService()->hasChild($permission1, $permission2));

        $result = $this->getDataService()->addChild($role, $permission2);
        $this->assertTrue($result);

        $this->getDataService()->assign($role, 'testuser');
    }

    public function testRemoveAssignments()
    {
        $permission1 = new Permission();
        $permission1->name = 'permission1';
        $result = $this->getDataService()->addItem($permission1);
        $this->assertTrue($result);

        $permission2 = new Permission();
        $permission2->name = 'permission2';
        $result = $this->getDataService()->addItem($permission2);
        $this->assertTrue($result);

        $permission3 = new Permission();
        $permission3->name = 'permission3';
        $result = $this->getDataService()->addItem($permission3);
        $this->assertTrue($result);

        $role = new Role();
        $role->name = 'admin';
        $result = $this->getDataService()->addItem($role);
        $this->assertTrue($result);


        $result = $this->getDataService()->addChild($permission1, $permission2);
        $this->assertTrue($result);

        $this->assertTrue($this->getDataService()->hasChild($permission1, $permission2));
        $this->assertFalse($this->getDataService()->hasChild($permission2, $permission1));

        $result = $this->getDataService()->addChild($permission2, $permission3);
        $this->assertTrue($result);
        $this->assertTrue($this->getDataService()->hasChild($permission2, $permission3));

        $this->getDataService()->removeChild($permission2, $permission3);
        $this->assertTrue($this->getDataService()->hasChild($permission1, $permission2));
        $this->assertFalse($this->getDataService()->hasChild($permission2, $permission3));

        $result = $this->getDataService()->addChild($permission1, $permission3);
        $this->assertTrue($result);
        $this->assertTrue($this->getDataService()->hasChild($permission1, $permission3));

        $this->getDataService()->removeChild($permission1, $permission2);
        $this->assertTrue($this->getDataService()->hasChild($permission1, $permission3));
        $this->assertFalse($this->getDataService()->hasChild($permission1, $permission2));

        $result = $this->getDataService()->addChild($role, $permission2);
        $this->assertTrue($result);

        $this->getDataService()->assign($role, 'testuser');

        $roles = $this->getDataService()->getRolesByUser('testuser');
        $this->assertTrue(count($roles) === 1);
        $this->assertTrue(isset($roles['admin']));

        $data = $this->getDataService()->removeAllAssignments();
        $roles = $this->getDataService()->getRolesByUser('testuser');
        $this->assertTrue(count($roles) === 0);
    }

    public function testGetChildren()
    {
        $permission1 = new Permission();
        $permission1->name = 'permission1';
        $result = $this->getDataService()->addItem($permission1);
        $this->assertTrue($result);

        $permission2 = new Permission();
        $permission2->name = 'permission2';
        $result = $this->getDataService()->addItem($permission2);
        $this->assertTrue($result);

        $permission3 = new Permission();
        $permission3->name = 'permission3';
        $result = $this->getDataService()->addItem($permission3);
        $this->assertTrue($result);


        $permission4 = new Permission();
        $permission4->name = 'permission4';
        $result = $this->getDataService()->addItem($permission4);
        $this->assertTrue($result);


        $permission5 = new Permission();
        $permission5->name = 'permission5';
        $result = $this->getDataService()->addItem($permission5);
        $this->assertTrue($result);


        $role = new Role();
        $role->name = 'admin';
        $result = $this->getDataService()->addItem($role);
        $this->assertTrue($result);

        $role2 = new Role();
        $role2->name = 'other';
        $result = $this->getDataService()->addItem($role2);
        $this->assertTrue($result);

        $this->getDataService()->assign($role, 'testuser');

        $this->getDataService()->assign($role2, 'testuser2');


        $result = $this->getDataService()->addChild($permission1, $permission2);
        $this->assertTrue($result);

        $result = $this->getDataService()->addChild($permission2, $permission3);
        $this->assertTrue($result);

        $result = $this->getDataService()->addChild($role, $permission1);
        $this->assertTrue($result);


        $result = $this->getDataService()->addChild($role2, $permission4);
        $this->assertTrue($result);
        $result = $this->getDataService()->addChild($role2, $permission5);
        $this->assertTrue($result);



        $children = $this->getDataService()->getPermissionsByUser('testuser');
        $this->assertArrayHasKey('permission1', $children);
        $this->assertArrayHasKey('permission2', $children);
        $this->assertArrayHasKey('permission3', $children);
        $this->assertArrayNotHasKey('permission4', $children);
        $this->assertArrayNotHasKey('permission5', $children);

        $children = $this->getDataService()->getPermissionsByUser('testuser2');
        $this->assertArrayNotHasKey('permission1', $children);
        $this->assertArrayNotHasKey('permission2', $children);
        $this->assertArrayNotHasKey('permission3', $children);
        $this->assertArrayHasKey('permission4', $children);
        $this->assertArrayHasKey('permission5', $children);


    }
}
